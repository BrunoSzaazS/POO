19/02
    Características de classe

        NivelDeAcesso class NomeClasse
        {
            //Corpo da classe
            //Atributo
            //Construtores
            //Metodos
        }

        Atributos
            2 Tipos de atributos:
                Características:
                    São informações que aparecem junto com o objeto. Uma vez que o objeto existe as características passam a existir.
                    Nunca mudam ou mudam muito raramente e sempre por razões externas ao sistema. 
                    Características não podem ser calculadas ou deduzidas e também não tem um valor inicial ou default. Só podem ser informadas

                Indicadores de Estados:
                    Geralmente tem um valor inicial conhecido. O estado de um objeto muda como consequência de ações que o objeto realiza ou sofre.

            Níveldeacesso tipo identificador = valor;

            Exemplo:
                Public class Pessoa
                {
                    private String nome, cpf;
                    //construtores
                    //Métodos
                }

        Métodos de acesso 
            Permitem que os atributos sejam alterados e lidos por entidades externas, mas sempre com controle da classe.

                Setters: Métodos que alteram o valor dos atributos. usando o valor que é informado no parâmetro do método. O ideal é que o setter faça uma validação 
                do valor recebido. Para cada atributo que seja característica deve existir um setter.
                Exemplo:
                    Public class Pessoa
                    {
                        private String nome, cpf;
                        public void SetNome(String valNome)
                        {
                            if(!valNome.isEmpty())
                            {
                                This.nome=valNome;
                            }
                        }
                    }

                Getters: retornam o valor do atributo
                Exemplo:
                    Public class Pessoa
                    {
                        private String nome, cpf;
                        public void GetNome()
                        {
                            return This.nome;
                        }
                    }
            
        Niveis de acesso para atributos e metoso
            Public -> Sem restrições.
            Protected -> Acessi dentro do mesmo pacote e pelas classes descendentes.
            Omitir -> Acesso padrão. Apenas dentro do mesmo pacote
            Private: Apenas a propria classe tem acesso. Atributos quase sempre são privados

            É aconcelhavel declarar em todas as classes um métpodos que imprima os valores dos atributos.
                Exemplo:
                    Public class Pessoa
                        {
                            private String nome, cpf;
                            public void SetNome(String valNome)
                            {
                                if(!valNome.isEmpty())
                                {
                                    This.nome=valNome;
                                }
                            }
                            public void GetNome()
                            {
                                return This.nome;
                            }
                            public void print()
                            {
                                System.out.println("Nome: " + nome + "/n" + "cpf: " + cpf);
                            }
                        }

        Operador Ternario
            exemplo: logica ? ValorVerdadeiro : ValorFalso

26/02

Construtores
    São métodos especializados na construção de objetos. o objetivo do construtor é deixar o objeto em um estado
    válido para que possa ser ultilizado logo após a construção.
    Gerealmente isso significa colocar valores válidos nos atributos. Em java, os contrutores sempre tem o mesmo nome que a classe.
    Além disto o construtor não pode ter nenhum tipo de retorno, nem mesmo void.
    Os construtores são chamados sempre pelo operador new ou por outros construtores. O operador new é responsavel
    por alocar memória para o objeto que será construído, chamar o construtor da classe e tem como resultado uma referência
    ao objetp construído. Essa referência precisa ser armazenada em uma variãvel de referência.

Referência This
    Dentro de todos os objetos, a referência this armazena o endereço do proprio objeto. Geralmente é ultilizado para 
    resolver conflitos de nomes entre atributos e parametros. Também serve para chamar um construtor a partir de outro construtor.
    
12/03

Assinatura de Métodos
    É o que indentifica um método e o torna ùnico no contexto onde é válido. Na mesma classe, não pode haver dois
    métodos  com a mesma assinatura. A assinatura é composta pelo nome do método e pelo tipo, ordem e quantidade de parâmetros.
    ex: metodod: public void umMetodo(String st, int val)
        assinatura: umMetodo(String,int)

Sobreposição
    Ocorre quando uma classe descendente reescreve um método que já existe em alguma classe ancestral, usando a mesma assinatura.
    Um ibjeto criado a partir da classe descendente, só terá acesso a nova versão do método. No entanto, dentro da 
    classe descendente, ainda é possivel acessar a versão ancestral usando a referencia super.

Construtores descendentes
    Um construtor de uma classe descendente, precisa obrigatoriamente fazer uma chamada a algum construtor de sua classe
    imediatamente ancestral em sua primeira linha de código.Essa chamada é feita usando a referência super.


19/03
Classes Abstratas
    São classes que não podem ser instanciadas. Ou porque não tem definições suficientes para construir objetos, ou porque objetos
    da classe não fazem sentido dentro do sistema. Servem apenas para serem ancestrais de outras classes.
    Ex:
    publuic abstract class NomeClasse
    {
        //Atributos
        //Construtores
        //Metodos
    }

Metodos Abstratos
    Só podem existir em classes abstratas. Um método abstrato é declarado mas não é implementado. Aimplementação deve ser feira
    pelas classes descendentes Geralmente são usados quando a mesma ação pode ser executada de maneiras diferentes dependendo
    da classe do objet. mesmo não tendo código na classe que o declara o método já pode ser chamado.
    EX:
    publuic abstract class NomeClasse
    {
        //Atributos
        //Construtores
        Public abstract void metodo();
    }